@page "/cart"
@using System.Linq
@inject ICartService _cartService

<PageTitle>Shopping Cart</PageTitle>

<h3>Shopping Cart</h3>

@if (cartProducts.Count is 0)
{
    <span>@message</span>
}
else
{
    <div>
        @foreach (var product in cartProducts)
        {
            <div class="container">
                <div class="image-wrapper">
                    <img class="image" src="@product.ImageUrl" alt="@product.Title"/>
                </div>
                <div class="name">
                    <h5>
                        <a href="/product/@product.ProductId">@product.Title</a>
                    </h5>
                    <span>@product.ProductType</span><br/>
                    <button class="btn-delete" @onclick="@(() => RemoveFromCart(product.ProductId, product.ProductTypeId))">Remove</button>
                </div>
                <div class="cart-product-price">
                    @product.Price
                </div>
            </div>
        }
        <div class="cart-product-price">
            Total (@cartProducts.Count) : $@cartProducts.Sum(product => product.Price)
        </div>
    </div>
}

@code {
    private List<CartProductResponse> cartProducts = null;
    private string message = "Loading cart...";

    // load/display cart 
    protected override async Task OnInitializedAsync()
    {
        await LoadCart();
    }

    // load the cart items
    private async Task LoadCart()
    {
        // no cart items
        if ((await _cartService.GetCartItems()).Count is 0)
        {
            message = "Your cart is empty.";
            cartProducts = new List<CartProductResponse>();
        }
        // cart items
        else
        {
            cartProducts = await _cartService.GetCartProducts();
        }
    }

    // remove product from cart
    private async Task RemoveFromCart(int productId, int productTypeId)
    {
        // remove item
        await _cartService.RemoveFromCart(productId, productTypeId);
        
        // reload cart
        await LoadCart();
    }

}