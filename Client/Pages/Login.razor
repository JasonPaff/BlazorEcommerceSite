@page "/login"
@using Microsoft.AspNetCore.WebUtilities
@inject IAuthService _authService
@inject ICartService _cartService
@inject NavigationManager _navigationManager
@inject ILocalStorageService _localStorage
@inject AuthenticationStateProvider _authenticationStateProvider

<PageTitle>Login</PageTitle>

<h3>Login</h3>

<EditForm Model="user" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator/>
    <div class="mb-3">
        <label for="email">Email</label>
        <InputText class="form-control" id="email" @bind-Value="user.Email"/>
        <ValidationMessage For="@(() => user.Email)"/>
    </div>
    <div class="mb-3">
        <label for="password">Password</label>
        <InputText class="form-control" id="password" @bind-Value="user.Password" type="password"/>
        <ValidationMessage For="@(() => user.Password)"/>
    </div>
    <button class="btn btn-primary" type="submit">Login</button>
</EditForm>
<div class="text-danger">
    <span>@errorMessage</span>
</div>
@code {
    private UserLogin user = new UserLogin();
    private string errorMessage = string.Empty;

    private string returnUrl = string.Empty;

    protected override void OnInitialized()
    {
        // get absolute url from browser
        var uri = _navigationManager.ToAbsoluteUri(_navigationManager.Uri);

        // parse return url
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
        {
            returnUrl = url;
        }
    }

    private async Task HandleLogin()
    {
        var result = await _authService.Login(user);

        if (result.Success)
        {
            // reset error message
            errorMessage = string.Empty;

            // store token in local storage
            await _localStorage.SetItemAsync("authToken", result.Data);

            // users authentication state
            await _authenticationStateProvider.GetAuthenticationStateAsync();

            await _cartService.StoreCartItems(true);
            
            // redirect to where the login came from
            _navigationManager.NavigateTo(returnUrl);
        }
        else
        {
            errorMessage = result.Message;
        }
    }
}