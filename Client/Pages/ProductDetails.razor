@page "/product/{id:int}"
@inject IProductService _productService
@inject ICartService _cartService

@if (_product is null)
{
    <span>@_message</span>
}
else
{
    <div class="media">
        <div class="media-image-wrapper mr-2">
            <img class="media-img" src="@_product.ImageUrl" alt="@_product.Title"/>
        </div>
        <div class="media-body">
            <h2 class="mb-0">@_product.Title</h2>
            <p>@_product.Description</p>
            @if (_product.Variants != null && _product.Variants.Count > 1)
            {
                <div>
                    <select class="form-control" @bind="currentTypeId">
                        @foreach (var variant in _product.Variants)
                        {
                            <option value="@variant.ProductTypeId">@variant.ProductType.Name</option>
                        }
                    </select>
                </div>
            }
            @if (GetSelectedVariant() != null)
            {
                @if (GetSelectedVariant().OriginalPrice > GetSelectedVariant().Price)
                {
                    <h6 class="text-muted original-price">
                        $@GetSelectedVariant().OriginalPrice
                    </h6>
                }
                <h4 class="price">
                    $@GetSelectedVariant().Price
                </h4>
            }
            <button class="btn btn-primary" @onclick="AddToCart">
                <i class="oi oi-cart"></i>&nbsp;&nbsp;&nbsp;Add to Cart
            </button>
        </div>
    </div>
}

@code {
    private Product? _product = null;
    private string _message = string.Empty;
    private int currentTypeId = 1;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        _message = "Loading Product";
        var result = await _productService.GetProduct(Id);
        if (!result.Success)
        {
            _message = result.Message;
        }
        else
        {
            _product = result.Data;

            if (_product.Variants.Count > 0)
            {
                currentTypeId = _product.Variants[0].ProductTypeId;
            }
        }
    }

    // add item to cart
    private async Task AddToCart()
    {
        var productVariant = GetSelectedVariant();
        var cartItem = new CartItem
        {
            ProductId = productVariant.ProductId,
            ProductTypeId = productVariant.ProductTypeId
        };

        await _cartService.AddToCart(cartItem);
    }
    
    // get selected product variant from drop-down
    private ProductVariant GetSelectedVariant()
    {
        var variant = _product.Variants.FirstOrDefault(v => v.ProductTypeId == currentTypeId);
        return variant;
    }
}






























