@using ECommerce.Client.Services.ProductService
@inject IProductService _productService
@implements IDisposable

@if (_productService.Products.Count is 0)
{
    <span>@_productService.Message</span>
}
else
{
    <ul class="list-unstyled">
        @foreach (var product in _productService.Products)
        {
            <li class="media my-3">
                <div class="media-image-wrapper mr-2">
                    <a href="/product/@product.Id">
                        <img class="media-img" src="@product.ImageUrl" alt="@product.Title"/>
                    </a>
                </div>
                <div class="media-body">
                    <a href="/product/@product.Id">
                        <h4 class="mb-0">
                            @product.Title
                        </h4>
                    </a>
                    <p>@product.Description</p>
                    <h5 class="price">
                        @GetPriceText(product)
                    </h5>
                </div>
            </li>
        }
    </ul>

    @for (var i = 1; i < _productService.PageCount; i++)
    {
        <a class="btn @(i == _productService.CurrentPage ? "btn-info" : "btn-outline-info") page-selection" href="/search/@_productService.LastSearchText/@i">
            @i
        </a>
    }
}

@code {

    protected override void OnInitialized()
    {
        _productService.ProductsChanged += StateHasChanged;
    }

    public void Dispose()
    {
        _productService.ProductsChanged -= StateHasChanged;
    }

    private string GetPriceText(Product product)
    {
        var variants = product.Variants;
        if (variants.Count == 0)
        {
            return string.Empty;
        }
        else if (variants.Count == 1)
        {
            return $"${variants[0].Price}";
        }

        var minPrice = variants.Min(v => v.Price);

        return $"Starting at ${minPrice}";
    }

}