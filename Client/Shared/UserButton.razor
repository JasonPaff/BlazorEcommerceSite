@inject ILocalStorageService _localStorage
@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager _navigationManager
@inject ICartService _cartService

<div class="dropdown">
    <button @onclick="ToggleUserMenu" @onfocusout="HideUserMenu" class="btn btn-secondary dropdown-toggle user-button">
        <i class="oi oi-person"></i>
    </button>
    <div class="dropdown-menu dropdown-menu-right @UserMenuCssClass">
        <AuthorizeView>
            <Authorized>
                <a href="profile" class="dropdown-item">Profile</a>
                <hr/>
                <button class="dropdown-item" @onclick="Logout">Logout</button>
            </Authorized>
            <NotAuthorized>
                <a href="login?returnUrl=@_navigationManager.ToBaseRelativePath(_navigationManager.Uri)" class="dropdown-item">Login</a>
                <a href="register" class="dropdown-item">Register</a>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</div>

@code {
    private bool showUserMenu = false;
    private string UserMenuCssClass => showUserMenu ? "show-menu" : null;

    // toggle user menu
    private void ToggleUserMenu()
    {
        showUserMenu = !showUserMenu;
    }

    // hide the user menu
    private async void HideUserMenu()
    {
    // delay 200ms so onFocusOut doesn't cancel link navigation
        await Task.Delay(200);

    // hide menu
        showUserMenu = false;
    }

    // logout the user
    private async Task Logout()
    {
    // remove token from local storage
        await _localStorage.RemoveItemAsync("authToken");

        // update cart items counter
        await _cartService.GetCartItemsCount();

    // update auth state
        await _authenticationStateProvider.GetAuthenticationStateAsync();

    // navigate to home page
        _navigationManager.NavigateTo("");
    }

}